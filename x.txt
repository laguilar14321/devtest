<?php

class human_resource_m extends CI_Model {
   function __construct() {
        parent::__construct();
        
    }

    function insert_csv($data) {

        $this->db->insert('tbl_employee_logs', $data);
    }
	

	public function hr_record_per_employee($limit, $start, $search, $fieldname, $from, $to){
 		 
			// $search = $this->input->get('search');
			// $fieldname = $this->input->get('fieldname');
 			$search = $this->input->get('search');
			$fieldname = $this->input->get('fieldname');
			
			
			
			if (isset($search)) {
				if (!empty($search)) {
					$search = "'%".$search."%'";
				}else{
					$search = "'%%'";
				}
			}

			if (isset($fieldname)) {
				$fieldname = $fieldname;
			}else{
				$fieldname = null;
			}


		if (!empty($fieldname)) {

			$fieldname = 'WHERE '.$fieldname.' LIKE '.$search;
		}else{
			$fieldname = null;
		}


	 


		$reg = "SELECT * FROM 
				(SELECT *, ROW_NUMBER() OVER (ORDER BY lastname asc) as row FROM tblEmployee $fieldname) 
				a WHERE row > $start and row <= ($limit + $start) " ;
		$stmt = $this->db->query($reg);
		$reg_arr = array();
		foreach ($stmt->result_array() as $row) {
			$reg_arr[] = $row;
		}
		return $reg_arr;
	}

	public function hr_employee_count($fieldname, $search){
	 
		if (isset($search)) {
			if (!empty($search)) {
				$search = "'%".$search."%'";
			}else{
				$search = "'%%'";
			}
		}


		if (!empty($fieldname)) {

			$fieldname = 'WHERE '.$fieldname.' LIKE '.$search;
		}else{
			$fieldname = null;
		}
		
		$emps = "SELECT * FROM tblEmployee  $fieldname";
		$smtp = $this->db->query($emps);
		 
		$row_count = $smtp->num_rows();

		if ($row_count == 0) {
			// error
		}else{
			return $row_count;
		}
	}


	 public function hr_profile_record(){
	 	$employee_no = $this->uri->segment(3);
 	 	$employee_record = "SELECT * from tbl_employee_logs where emp_id = $employee_no order by date_time_in_out desc";

		$stmt = $this->db->query($employee_record);
		$emp_array = array();
		foreach ($stmt->result_array() as $row) {
			$emp_array[] = $row;
		}
		return $emp_array;
	}

	public function get_employee_profile($limit, $start, $search ,$fieldname){
		 	$search = $this->input->get('search');
			$fieldname = $this->input->get('fieldname');
		 
		// if (isset($search)) {
		// 	if (!empty($search)) {
		// 		$search = "'%".$search."%'";
		// 	}else{
		// 		$search = "'%%'";
		// 	}
		// }


		if (!empty($fieldname)) {

			$fieldname = 'WHERE '.$fieldname.' LIKE '.$search;
		}else{
			$fieldname = null;
		}


		$log = "SELECT * FROM 
				(SELECT *, ROW_NUMBER() OVER (ORDER BY id DESC) as row FROM tbl_employee_logs $fieldname) a 
				WHERE row > $start and row <= ($limit + $start)" ;

		$stmt = $this->db->query($log);
		$emp_arr = array();

		foreach ($stmt->result_array() as $row) {
			$emp_arr[] = $row;
		}
		return $emp_arr;

	}

	public function employee_table_count($fieldname, $search){
	 
		if (isset($search)) {
			if (!empty($search)) {
				$search = "'%".$search."%'";
			}else{
				$search = "'%%'";
			}
		}


		if (!empty($fieldname)) {

			$fieldname = 'WHERE '.$fieldname.' LIKE '.$search;
		}else{
			$fieldname = null;
		}
		
		$emps = "SELECT * FROM tbl_employee_logs  $fieldname";
		$smtp = $this->db->query($emps);
		 
		$row_count = $smtp->num_rows();
		if ($row_count == 0) {
			// error
		}else{
			return $row_count;
		}
	}

	public function generate_holiday(){
		$generate_holiday = "SELECT * FROM tblHoliday order by id desc";
		$stmt = $this->db->query($generate_holiday);
		$emp_arr = array();
		foreach ($stmt->result_array() as $row) {
			$emp_arr[] = $row;
		}
		return $emp_arr;

	}

	public function generate_personal_record(){
			$master_db = $this->load->database('default', TRUE);
		$emp_id = !empty($_POST['emp_id']) ?$_POST['emp_id'] : "";
	 
		$generate_holiday = "SELECT * FROM tblEmployee where emp_no=$emp_id";

		$stmt = $master_db ->query($generate_holiday);
		$emp_rec = array();
		foreach ($stmt->result_array() as $row) {
			$emp_rec[] = $row;
		}
			 
		return $emp_rec;
		
	}



	public function generate_record($emp_no){
		$emp_id = !empty($_POST['emp_id']) ?$_POST['emp_id'] : "";
		$date_from = !empty($_POST['date_picker1']) ?$_POST['date_picker1'] : "";
		$date_to = !empty($_POST['date_picker2']) ?$_POST['date_picker2'] : "";
 		$sql="SELECT * from  tbl_employee_logs where emp_id ='$emp_no' AND (date_time_in_out BETWEEN '$date_from 00:00:01' AND '$date_to 23:59:59' ) ORDER BY date_time_in_out asc";
		 
		$stmt = $this->db->query($sql);
		$emp_rec = array();
		foreach ($stmt->result_array() as $row) {
			$emp_rec[] = $row;
		}

		return $emp_rec;
		
	}

	public function generate_cs_sched($emp_no){
		$master_db = $this->load->database('default', TRUE);
		$emp_id = !empty($_POST['emp_id']) ?$_POST['emp_id'] : "";
		$date_fmat=array();	
		$time_sched_in=array();
		$time_sched_out=array();
		$emp_description = array();
		$date_from = !empty($_POST['date_picker1']) ?$_POST['date_picker1'] : "";
		$date_to = !empty($_POST['date_picker2']) ?$_POST['date_picker2'] : "";
		$sql_sched="SELECT tbl_schedule.date_sched,
									tbl_schedtype.id, 
									tbl_schedtype.time_from,
									tbl_schedtype.time_to,
									tbl_schedtype.description
						  FROM tblEmployee INNER JOIN
			              tbl_schedule ON tblEmployee.emp_id = tbl_schedule.emp_id INNER JOIN
			              tbl_schedtype ON tbl_schedtype.id = tbl_schedule.sched_type_id
			             WHERE  tbl_schedule.emp_no =$emp_no AND  (tbl_schedule.date_sched BETWEEN '$date_from' AND '$date_to')  ORDER BY tbl_schedule.date_sched ";
 	 
		$stmt = $master_db->query($sql_sched);
		$emp_rec = array();
		foreach ($stmt->result_array() as $row) {
			$emp_rec[] = $row;
		}
		return $emp_rec;
	}


	// public function generate_bulk_record(){
	// 	$emp_id = !empty($_POST['emp_id']) ?$_POST['emp_id'] : "";
	// 	$generate_bulk = "SELECT DISTINCT emp_id,emp_name from  tbl_employee_logs order by emp_name asc";
	// 	$stmt = $this->db->query($generate_bulk);
	// 	$emp_rec = array();
	// 	foreach ($stmt->result_array() as $row) {
	// 		$emp_rec[] = $row;
	// 	}
	// 	return $emp_rec;
		
	// }

	public function get_bulk_employee(){
		$master_db = $this->load->database('default', TRUE);
		$generate_bulk_emp = "SELECT emp_no,firstname,lastname from tblEmployee where section_id != 1  and  section_id != 7  and emp_no!=''  order by lastname asc";
		$stmt = $master_db->query($generate_bulk_emp);
		$emp_rec = array();
		foreach ($stmt->result_array() as $row) {
			$emp_rec[] = $row;
		}
		return $emp_rec;
	}

	public function get_bulk_employee_onsite(){
		$master_db = $this->load->database('default', TRUE);
		$generate_bulk_emp = "SELECT emp_no,firstname,lastname from tblEmployee where    section_id = 7   order by lastname asc";
		$stmt = $master_db->query($generate_bulk_emp);
		$emp_rec = array();
		foreach ($stmt->result_array() as $row) {
			$emp_rec[] = $row;
		}
		return $emp_rec;
	}


	public function generate_bulk_record($emp_no){
	
		// $emp_id = !empty($_POST['emp_id']) ?$_POST['emp_id'] : "";

		$date_from = !empty($_POST['date_picker1']) ?$_POST['date_picker1'] : "";
		$date_to = !empty($_POST['date_picker2']) ?$_POST['date_picker2'] : "";

 		$sql="SELECT * from  tbl_employee_logs where emp_id =$emp_no and (date_time_in_out BETWEEN '$date_from 00:01' AND '$date_to 23:59' ) ORDER BY emp_name asc";
		$stmt = $this->db->query($sql);
		$emp_rec = array();
		foreach ($stmt->result_array() as $row) {
			$emp_rec[] = $row;
		}

		return $emp_rec;
		
	}


	public function generate_cs_bulk_sched($emp_no){
		$DB = $this->load->database('default', TRUE);

		// $emp_id = !empty($_POST['emp_id']) ?$_POST['emp_id'] : "";
		$date_from = !empty($_POST['date_picker1']) ?$_POST['date_picker1'] : "";
		$date_to = !empty($_POST['date_picker2']) ?$_POST['date_picker2'] : "";
		$date_fmat=array();	
		$time_sched_in=array();
		$time_sched_out=array();
		$emp_description = array();
		$sql_sched="SELECT tbl_schedule.date_sched,
									tbl_schedule.emp_no,
									tbl_schedtype.id, 
									tbl_schedtype.time_from,
									tbl_schedtype.time_to,
									tbl_schedtype.description

						  FROM tblEmployee LEFT JOIN
			              tbl_schedule ON tblEmployee.emp_id = tbl_schedule.emp_id LEFT JOIN
			              tbl_schedtype ON tbl_schedtype.id = tbl_schedule.sched_type_id
			              WHERE   tbl_schedule.emp_no like'%$emp_no%' and   (tbl_schedule.date_sched BETWEEN '$date_from' AND '$date_to') ";
	
		$stmt = $DB->query($sql_sched);
		$emp_rec = array();
		foreach ($stmt->result_array() as $row) {
			$emp_rec[] = $row;
		}
		return $emp_rec;
	}


 
	public function save_created_holiday($data){

		$holiday_type  = $data['holiday_type'];
		$date_holiday   = $data['from'];
		$holiday_name = $data['holiday_title'];


		$data = array(
			'hdate' => $date_holiday,
		    'holiday'  =>$holiday_name,
		    'type' => $holiday_type
          
        );

		$this->db->insert('tblHoliday', $data);

	}

	public function update_created_holiday($data){

		// $id = $this->uri->segment(3);
		$id=$data['holiday_id'];
		$holiday_type  = $data['holiday_type'];
		$date_holiday   = $data['from'];
		$holiday_name = $data['holiday_title'];


		$data = array(
			'hdate' => $date_holiday,
		    'holiday'  =>$holiday_name,
		    'type' => $holiday_type
          
        );
        // fn_print_die($data);
		$this->db->where('id', $id);
		$this->db->update('tblHoliday', $data);
	}

	public function generate_holiday_id($h_id){
		$generate_holiday = "SELECT * FROM tblHoliday  where id=$h_id";
		$stmt = $this->db->query($generate_holiday);
		$emp_arr = array();
		foreach ($stmt->result_array() as $row) {
			$emp_arr[] = $row;
		}
		return $emp_arr;

	}


	public function delete_created_holiday($holiday_id){

		$this->db->where('id', $holiday_id);
   		$this->db->delete('tblHoliday');
	}

		public function holiday_table_count($fieldname, $search){
	 
		if (isset($search)) {
			if (!empty($search)) {
				$search = "'%".$search."%'";
			}else{
				$search = "'%%'";
			}
		}


		if (!empty($fieldname)) {

			$fieldname = 'WHERE '.$fieldname.' LIKE '.$search;
		}else{
			$fieldname = null;
		}
		
		$emps = "SELECT * FROM tblHoliday  $fieldname";
		$smtp = $this->db->query($emps);
		 
		$row_count = $smtp->num_rows();
		if ($row_count == 0) {
			// error
		}else{
			return $row_count;
		}
	}

	public function get_holiday_profile($limit, $start, $search ,$fieldname){
		 	$search = $this->input->get('search');
			$fieldname = $this->input->get('fieldname');
		 
		if (isset($search)) {
			if (!empty($search)) {
				$search = "'%".$search."%'";
			}else{
				$search = "'%%'";
			}
		}


		if (!empty($fieldname)) {

			$fieldname = 'WHERE '.$fieldname.' LIKE '.$search;
		}else{
			$fieldname = null;
		}


		$log = "SELECT * FROM 
				(SELECT *, ROW_NUMBER() OVER (ORDER BY id DESC) as row FROM tblHoliday $fieldname) a 
				WHERE row > $start and row <= ($limit + $start)" ;

		$stmt = $this->db->query($log);
		$emp_arr = array();

		foreach ($stmt->result_array() as $row) {
			$emp_arr[] = $row;
		}
		return $emp_arr;

	}

 

 

	 

}
?>